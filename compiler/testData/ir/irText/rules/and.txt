FILE fqName:<root> fileName:/and.kt
  FUN name:foo visibility:public modality:FINAL <> (pv:kotlin.PVar<kotlin.Int>) returnType:kotlin.Unit [rule]
    VALUE_PARAMETER name:pv index:0 type:kotlin.PVar<kotlin.Int>
    RULE_BODY max backtrack stack depth 4 total states 5 for 8 nodes
      RULE_OR
        RULE_AND
          RULE_LEAF   :1      depth 0   ^fail^  =>goto:2>
            CONST Int type=kotlin.Int value=1
          RULE_LEAF   :2      depth 0   ^fail^  =>goto:3>
            CONST String type=kotlin.String value=""
          RULE_LEAF   :3      depth 0   ^fail^  =>goto:4>
            CONST Boolean type=kotlin.Boolean value=true
          RULE_IS_THE :4      depth 0   ^fail^  =>goto:5>
            GET_VAR 'pv: kotlin.PVar<kotlin.Int> declared in <root>.foo' type=kotlin.PVar<kotlin.Int> origin=null
            CONST Int type=kotlin.Int value=3
          RULE_ONE_OF :5/1    depth 1   ^fail^  =>goto:6>
            GET_VAR 'pv: kotlin.PVar<kotlin.Int> declared in <root>.foo' type=kotlin.PVar<kotlin.Int> origin=null
            CALL 'public final fun rangeTo (other: kotlin.Int): kotlin.ranges.IntRange declared in kotlin.Int' type=kotlin.ranges.IntRange origin=RANGE
              $this: CONST Int type=kotlin.Int value=1
              other: CONST Int type=kotlin.Int value=10
          RULE_CUT    :6      depth 2   ^fail^  =>goto:7>
          RULE_WHILE  :7/3    depth 2   ^fail^  =>goto:8>
            CALL 'public final fun greater (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=GT
              arg0: BLOCK type=kotlin.Int origin=ELVIS
                VAR IR_TEMPORARY_VARIABLE name:tmp1_elvis_lhs type:kotlin.Int? [val]
                  BLOCK type=kotlin.Int? origin=SAFE_CALL
                    VAR IR_TEMPORARY_VARIABLE name:tmp0_safe_receiver type:kotlin.Int? [val]
                      CALL 'public final fun <get-value> (): A of kotlin.PVar? declared in kotlin.PVar' type=kotlin.Int? origin=GET_PROPERTY
                        $this: GET_VAR 'pv: kotlin.PVar<kotlin.Int> declared in <root>.foo' type=kotlin.PVar<kotlin.Int> origin=null
                    WHEN type=kotlin.Int? origin=null
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          arg0: GET_VAR 'val tmp0_safe_receiver: kotlin.Int? [val] declared in <root>.foo' type=kotlin.Int? origin=null
                          arg1: CONST Null type=kotlin.Nothing? value=null
                        then: CONST Null type=kotlin.Nothing? value=null
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: CALL 'public final fun dec (): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=null
                          $this: GET_VAR 'val tmp0_safe_receiver: kotlin.Int? [val] declared in <root>.foo' type=kotlin.Int? origin=null
                WHEN type=kotlin.Int origin=null
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      arg0: GET_VAR 'val tmp1_elvis_lhs: kotlin.Int? [val] declared in <root>.foo' type=kotlin.Int? origin=null
                      arg1: CONST Null type=kotlin.Nothing? value=null
                    then: CONST Int type=kotlin.Int value=0
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: GET_VAR 'val tmp1_elvis_lhs: kotlin.Int? [val] declared in <root>.foo' type=kotlin.Int? origin=null
              arg1: CONST Int type=kotlin.Int value=0
          RULE_LEAF   :8/4    depth 3   ^case:3^  =>yield>
            CONST Int type=kotlin.Int value=200
            CONST Int type=kotlin.Int value=300
